//ÁªôÂá∫‰∏§‰∏™ ÈùûÁ©∫ ÁöÑÈìæË°®Áî®Êù•Ë°®Á§∫‰∏§‰∏™ÈùûË¥üÁöÑÊï¥Êï∞„ÄÇÂÖ∂‰∏≠ÔºåÂÆÉ‰ª¨ÂêÑËá™ÁöÑ‰ΩçÊï∞ÊòØÊåâÁÖß ÈÄÜÂ∫è ÁöÑÊñπÂºèÂ≠òÂÇ®ÁöÑÔºåÂπ∂‰∏îÂÆÉ‰ª¨ÁöÑÊØè‰∏™ËäÇÁÇπÂè™ËÉΩÂ≠òÂÇ® ‰∏Ä‰Ωç Êï∞Â≠ó„ÄÇ 
//
// Â¶ÇÊûúÔºåÊàë‰ª¨Â∞ÜËøô‰∏§‰∏™Êï∞Áõ∏Âä†Ëµ∑Êù•ÔºåÂàô‰ºöËøîÂõû‰∏Ä‰∏™Êñ∞ÁöÑÈìæË°®Êù•Ë°®Á§∫ÂÆÉ‰ª¨ÁöÑÂíå„ÄÇ 
//
// ÊÇ®ÂèØ‰ª•ÂÅáËÆæÈô§‰∫ÜÊï∞Â≠ó 0 ‰πãÂ§ñÔºåËøô‰∏§‰∏™Êï∞ÈÉΩ‰∏ç‰ºö‰ª• 0 ÂºÄÂ§¥„ÄÇ 
//
// Á§∫‰æãÔºö 
//
// ËæìÂÖ•Ôºö(2 -> 4 -> 3) + (5 -> 6 -> 4)
//ËæìÂá∫Ôºö7 -> 0 -> 8
//ÂéüÂõ†Ôºö342 + 465 = 807
// 
// Related Topics ÈìæË°® Êï∞Â≠¶ 
// üëç 5204 üëé 0

package leetcode.editor.cn;

import leetcode.editor.datastructure.ListNode;

//JavaÔºö‰∏§Êï∞Áõ∏Âä†

/**
 * ÊÄùË∑Ø:ÈìæË°®ÈïøÂ∫¶‰∏çËÉΩÁ°ÆÂÆö,Á¨¨‰∏ÄÂÖÉÁ¥†ÊòØ‰∏™‰ΩçÊï∞,Á¨¨‰∫åÂÖÉÁ¥†ÂçÅ‰ΩçÊï∞,ÂÖ∂Ê¨°......
 * ‰æùÊ¨°ÊääÊØè‰∏™ÈìæË°®ÈÅçÂéÜÂá∫Êù•,Âπ∂ËÆ°ÁÆóÂá∫Ëøô‰∏™ÈìæË°®ÁöÑÊï∞ÁõÆ
 * ÁÑ∂ÂêéÂú®Áõ∏Âä†,ËøîÂõû‰∏Ä‰∏™Êñ∞ÁöÑÈìæË°®
 */
public class P2AddTwoNumbers {
    private ListNode head = new ListNode(0);

    public static void main(String[] args) {
        Solution solution = new P2AddTwoNumbers().new Solution();
        // TO TEST
        P2AddTwoNumbers listLink = new P2AddTwoNumbers();
        listLink.addNode(new ListNode(1));
        // listLink.addNode(new ListNode(4));
        // listLink.addNode(new ListNode(3));
        listLink.printLink();
        P2AddTwoNumbers listLink2 = new P2AddTwoNumbers();
        listLink2.addNode(new ListNode(9));
        listLink2.addNode(new ListNode(9));
        // listLink2.addNode(new ListNode(4));
        // listLink2.addNode(new ListNode(9));

        int result = solution.traverseLink(listLink.head.next);
        int result2 = solution.traverseLink(listLink2.head.next);
        System.out.println(result + "   " + result2);
        System.out.println("--------------------------------");
        ListNode listNode = solution.addTwoNumbers(listLink.head.next, listLink2.head.next);
        P2AddTwoNumbers twoNumbers = new P2AddTwoNumbers();
        twoNumbers.addNode(listNode);
        twoNumbers.printLink();
    }

    public void printLink() {
        if (head.next == null) {
            System.out.println("ÈìæË°®‰∏∫Á©∫!");
            return;
        }
        ListNode temp = head.next;
        while (temp != null) {
            System.out.print(temp.val + "->");
            temp = temp.next;
        }
        System.out.println();
    }

    public void addNode(ListNode node) {
        ListNode temp = this.head;
        while (temp.next != null) {
            temp = temp.next;
        }
        temp.next = node;
    }


    //leetcode submit region begin(Prohibit modification and deletion)

    /**
     * Definition for singly-linked list.
     * public class ListNode {
     * int val;
     * ListNode next;
     * ListNode() {}
     * ListNode(int val) { this.val = val; }
     * ListNode(int val, ListNode next) { this.val = val; this.next = next; }
     * }
     */
    class Solution {
        public int traverseLink(ListNode listNode) {
            if (listNode.next == null) {
                System.out.println("ÈìæË°®‰∏∫Á©∫!");
                return -1;
            }
            int sum = 0;
            int count = 0;
            ListNode temp = listNode;
            while (temp != null) {
                sum += temp.val * (int) Math.pow(10, count);
                count++;
                temp = temp.next;

            }
            return sum;
        }

        public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
            // ListNode listNode = new ListNode(-1);
            // ListNode temp = listNode;
            // int sum1 = this.traverseLink(l1);
            // int sum2 = this.traverseLink(l2);
            // int result = sum1 + sum2;
            // // ‰æùÊ¨°ÂèñÂá∫resultÁöÑËÆ°ÁÆóÁªìÊûúÁöÑ‰ΩçÊï∞
            // int[] ints = new int[String.valueOf(result).length()];
            // for (int i = 0; i < ints.length; i++) {
            //     ints[i] = (int) (result / Math.pow(10, i) % 10);
            //     temp.next = new ListNode(ints[i]);
            //     temp = temp.next;
            // }
            // return listNode.next;
            ListNode head = new ListNode(0);
            ListNode cur = head;
            // Ë°®Á§∫Ëøõ‰Ωç
            int carry = 0;
            // ÈáåÈù¢carry>0 ,Â∞±ÊòØË¶ÅËÄÉËôëËøòÊúâËøõ‰ΩçÁöÑÊÉÖÂÜµ,ÊØîÂ¶Ç1+99=100
            // Âç≥ÊúÄÂêéÂíåÁöÑ‰ΩçÊï∞ÊØîÂéüÊù•‰∏§‰∏™Êï∞ÊúÄÂ§ß‰ΩçËøòÂ§ö‰∏Ä‰ΩçÁöÑÊÉÖÂÜµ.ÊâÄ‰ª•ÈúÄË¶Å‰∏Ä‰∏™carry>0Âà§Êñ≠
            // ÂΩìÂâçÈÅçÂéÜÂÆå‰∏§‰∏™ÈìæË°®Âêé,‰ΩÜ‰ªçÊúâcarry>0,Ë°®Á§∫ËøòÊúâËøõ‰Ωç,Â∞±ÈúÄË¶ÅÁªßÁª≠ÂàõÂª∫ÁªìÁÇπ
            while (l1 != null || l2 != null || carry > 0) {
                int v1Val = l1 != null ? l1.val : 0;
                int v2Val = l2 != null ? l2.val : 0;
                int sum = v1Val + v2Val + carry;
                carry = sum / 10;
                cur.next = new ListNode(sum % 10);
                cur = cur.next;
                if (l1 != null) {
                    l1 = l1.next;
                }
                if (l2 != null) {
                    l2 = l2.next;
                }
            }
            return head.next;
        }
    }
//leetcode submit region end(Prohibit modification and deletion)

}